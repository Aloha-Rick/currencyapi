FORMAT: 1A
HOST: https://currencyapi-test.giftbit.com/v1/

# Giftbit Currency API

Building into Giftbit's RESTful Currency API gives you a complete and powerful e-commerce value solution for your business to easily power gift cards, promotions, credits, and more.

## Reporting Errors or Suggestions

This interactive documentation will provide full code samples in many popular languages and let you try out all functionality.

The API Blueprint file that produces this documentation is in GitHub at https://github.com/Giftbit/currencyapi.  If you find a mistake or have a suggestion for improvement, please submit it directly via pull request.

## API Base URLs

Along with Giftbit's production environment we also have a test environment.  This interactive documentation will make calls to the test environment.  The respective base URLs are:
<ul style="list-style-type:circle">
  <li><em>https://currencyapi.giftbit.com/v1/</em></li>
  <li><em>https://currencyapi-test.giftbit.com/v1/</em></li>
</ul>

## Account creation and authorization

You'll need your `access_token` from your Giftbit merchant account details page to use the API.
If you don't already have a Testbed merchant account you can <em><a href="https://testbed.giftbit.com/v1/register" target="_blank">sign up here</a></em>.

Once you are comfortable with your integration in your test environment you can <em><a href="http://info.giftbit.com/cf/currency_invite" target="_blank">sign up for a production account here</a></em>.

Be sure to store your production API token extremely securely in your production configurations.

You authenticate with your `access_token` by including your token prefixed by the word ‘Bearer’ (case sensitive) and a space in the “Authorization” HTTP header, as per the examples in this
documentation.

## Understanding the API: the relationship between Cards and Codes

The API is structured around two main endpoints and their corresponding concepts: Cards and Codes. A Card represents a unique gift card, promotional code, credit, or other type of value that your business wishes to issue. A Card is the thing that your internal team will interact with following your implementation (creation, retrieval, listing, statistics, etc).  

A Code is the unique financial device associated with a Card. A Code has a 'fullcode' that is a unique, unguessable alpha-numeric code that is distributed to a recipient. A Code has a balance, a currency type, an optional expiry and all the Transactions (uses) associated with that code. Your consumer-facing functionality (checkout, balance check, transaction history for a code) interacts with the /Code endpoint.

There is a 1-1 relationship between a Card and a Code. You specify the details of the Code when you create the Card. Giftbit plans to add extensive functionality to Card including automated delivery mechanisms, templating, external integrations, and more - hence the separation from Code.

## Common use case

A currently supported use case for this API is one in which Giftbit powers your gift cards. First, you would create a Card with an attached Code, which contains the value which you wish to send as well as the date you would like the code to expire (if applicable). You would then deliver the fullcode associated with this Code to your recipient, and allow the recipient to redeem value against this Code in one or more transactions. You can check the transaction history or balance remaining on the Code at any time.

The steps you would take in this use case are: 
- Create a new Card with associated Code (POST /cards). Make sure you keep the returned cardId.
- Retrieve the fullcode using the cardId to deliver to your recipient (GET /cards/{cardId}/code/fullcode).
- Accept the fullcode in your checkout, and create a Transaction on the Code (POST /codes/{fullcode}/transactions).
- Check the remaining value associated with the fullcode and display to your recipient (GET /codes/{fullcode}/balance).

### High level architecture diagram

![High level architecture](http://resources.giftbit.com/api/embeddedimages/Currency.API.high.level.architecture.png)

## Coding for idempotency and the userSuppliedId

The API is fully idempotent on the 'userSuppliedId' field, which is a required parameter for all endpoint operations that result in a change of state on the Giftbit side (POST, PUT, DELETE).  Therefore, in the case of a non-received response from the API or other unknown condition, it is safe and recommended to retry the request with the same userSuppliedId.

For example, your customer is using a Code in your checkout.  You POST to the /codes/{fullcode}/transactions endpoint to mark the use, but get a network timeout and are unable to process the response. As a result, your system doesn't know if Giftbit successfully received your POST and recorded the transaction.  With idempotency, you do not need any lookups or other complicated error handling to see if the original API call succeeded. You can simply retry the same call (as many times as needed) with the same userSuppliedId, and get the same 200 response upon success whether or not a previous request went through. Our server will do the operation once and only once for that userSuppliedId.

Given the above, it is important you think about how to structure your userSuppliedIds and error handling so that you are always sending a unique value for different logical requests, but the same one for any retries.  

Note that userSuppliedIds do not need to be unique across different endpoints.

## Handling error responses

Clients should always check the HTTP status code of the response and act accordingly if the response is not a 200.

Error response JSON will be in the following format:

        
        {
            status: (number) - will match the HTTP response code.    
            message: (string, optional) - a descriptive error message if one is available
            code: (string, optional) - a code that can be provided to Giftbit support if troubleshooting help is needed
        }

Example error responses:
### 400 (bad request)
        {
            "status": 400,
            "message": "Failed to create card due to error during code creation. Response from code creation: Bad Request. Missing Required Parameter 'initialValue'."
        }

### 401 (unauthorized)
        {
            "status": 401,
            "message": "Unauthorized",
            "code": "CREDENTIALS_INVALID"
        }
        
### 409 (idempotency failure)

        {
            "message": "A different transaction with the same userSuppliedId already exists."
        }


## A note on security and fullcodes

A fullcode is the property of a Code object that represents real value in your checkout. We have some recommended best practices around creating and accessing them:
 - Only retrieve the fullcode as returned by /cards/{cardId}/code/fullcode endpoint when you absolutely need it, such as when you will distribute it to your recipient.  No other API calls will return the fullcode.
 - There is no need to ever store fullcodes in your system and we strongly recommend against doing so.  You should store the corresponding cardId upon creation for future reference and API calls.  All functionality only requires you to pass the fullcode through your system in a transient manner.

Note that Giftbit is a PCI compliant platform and we use all modern best practices around cryptography and access control to keep your codes safe.

## About dates
The API expects all dates in request parameters to conform to the ISO-8601 format, specifically "yyyy-MM-dd'T'HH:mm:ss.SSSZ".  You can see examples in this documentation.
This allows you to control things such as Code expiry in fine granularity to the timezone of your choosing.   All responses will always be given in this same format converted to the UTC timezone (+0000)

## About currency value and currency type
Where currency type (eg. USD, CDN, AUD) is required or returned, the API expects/uses 3 character uppercase codes conforming to the ISO-4217 standard. Giftbit does not do any currency conversion nor does currency influence internal behaviour; rather, currency allows you to issue and track cards in different currencies as you choose.

In all cases where value is concerned, you need to provide the amount in the smallest currency unit. For most, this is the amount in cents (or pence, penny, or similarly named unit). For example, to create a Card for USD1.00, you would set the initialValue=100 (100 cents).

For zero-decimal currencies, use the regular denomination. For example, for ¥1, you should set initialValue=1 (1 JPY), since ¥1 is the smallest currency unit.

## Legal responsibilities
The Giftbit Currency API provides flexibility to implement multiple currency solutions (gift cards, unique promo codes, credit refunds, etc). It is the responsibility of the API user and their organization to understand and follow the jurisdictions and laws that govern all aspects of their implementation.

## Ping and health check [/ping]
Use the /ping endpoint to check that your authorization is working correctly or to healthcheck the API. 


### Ping [GET]
+ Request (application/json)
    + Headers

            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200
    + Attributes
        + username (string) - The email address associated with the credentials provided.
        + servertime (string) - The current time on the server (ISO 8601 format)

    + Body
    
            {
                "username":"example_merchant_account@yourdomain.com",
                "servertime": "2016-09-08T18:44:02.124+0000"
            }
        
+ Response 401

        {
            "status": 401,
            "message": "Unauthorized",
            "code": "CREDENTIALS_INVALID"
        }

## Cards [/cards/]
The /cards endpoint is for use by your internal team to create and manage your Cards and Codes.
Cards represent a gift card, promotional offer, credit, or other means of eCommerce currency relevant to your business.  Every Card is created with a corresponding Code automatically.  You access details on your both your Cards and your Codes through the cardId, which eliminates the need to ever store a fullcode.

### Create a Card and its Code [POST]

Create a Card and its corresponding Code.  Note that cardId on response should be persisted to lookup or interact with the Code.  The Code is not returned as part of the response.  If you provide an expiry, please ensure you have confirmed the legality of expiring value for your implementation.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
    + Attributes
        + userSuppliedId (string) - The unique identifier you provided when this Card was created. 
        + Code
            + initialValue (number) - the starting value of the code, in the smallest currency unit (such as cents).
            + currency (string) - The 3 character ISO-4217 currency.
            + expires (string) - The code's optional expiry date and time.  ISO-8601 format.  

    + Body
    
            {
                "userSuppliedId": "12345678",
                "code":
                {
                    "initialValue":5000,
                    "currency":"CAD",
                    "expires":"2017-03-03T08:00:00.000+0000"
                }
            }
        
+ Response 200
    + Attributes
        + Card
            + userSuppliedId (string) - The unique identifier you provided when this Card was created. 
            + cardId (string) - Giftbit's unique identifier for this Card.  Be sure to persist this value for future operations.
            + dateCreated (string) - The Giftbit system time of the creation in ISO-8601 format.

    + Body
    
            {
                "cardId":"5c1c1760-b185-4861-a4fc-47eca84bf52b",
                "userSuppliedId":"12345678",
                "dateCreated":"2016-08-10T08:00:00.000+0000"
            }
    
    
### List Cards [GET /cards/{?limit}{?offset}]

Retrieve your created Cards.  Results are returned in descending order of creation (newest first).
+ Request (application/json)
    + Headers
    
             Authorization: Bearer <YOUR_ACCESS_TOKEN>
   
+ Parameter
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. Default 0.

+ Response 200

    + Body
    
            {
                "cards":[
                    {
                    "cardId": "8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "userSuppliedId":"1234"
                    },
                    {
                    "cardId": "4e61aba2-5d5a-4e99-8574-6479cecce0dd",
                    "dateCreated": "2016-09-01T23:42:35.000+0000",
                    "userSuppliedId":"1235"
                    },
                    {
                    "cardId": "3c83dc55-63e1-4148-8ed7-501bcf2aff5d",
                    "dateCreated": "2016-09-01T23:42:23.000+0000",
                    "userSuppliedId":"1236"
                    },
                    {
                    "cardId": "c8dc87a7-7739-403f-8aa7-6c995d7a1d29",
                    "dateCreated": "2016-09-01T23:42:17.000+0000",
                    "userSuppliedId":"1237"
                    },
                    {
                    "cardId": "56d23f04-64a8-452b-b3a1-3e758ebb6adc",
                    "dateCreated": "2016-09-01T23:41:32.000+0000",
                    "userSuppliedId":"1238"
                    }
                ],
                "pagination":{
                    "count": 5,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 5
                }
            }
    
### Retrieve Card [GET /cards/{cardId}]

Look up a single Card by your userSuppliedId or by the Giftbit assigned cardId.
            
+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Body
        
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "dateCreated": "2016-09-01T23:47:02.000+0000"
                }
            }
    
### Retrieve a fullcode by cardId [GET /cards/{cardId}/code/fullcode]

After creating a Card, use this endpoint to retrieve the fullcode to give to your recipient.  This is the code worth value to your organization; do not store this code in your database or other parts of your system.  If you are tracking recipients, associate your recipient with the cardId.

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Body
    
            {
                "fullcode":{
                    "code" : "GFBT-ABCDE-FGHIJK-LMNOP-12345"
                }
            }

### Retrieve a Code by cardId [GET /cards/{cardId}/code]

Use this endpoint if your system or internal staff need to retrieve basic information about a Code.  See the Code endpoint documentation for response format.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.

### Retrieve a Code balance by cardId [GET /cards/{cardId}/code/balance]

Use this endpoint if your system or internal staff need to retrieve up-to-date balance information about a Code.  See the Code endpoint documentation for response format.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Response 200

    + Body
    
            {
                "balance":{
                    "currentValue": 200
                }
            }

### Retrieve Transactions for a Code by cardId [GET /cards/{cardId}/code/transactions/]

Use this endpoint if your system or internal staff need to retrieve all the Transactions for a Code.  See the Code endpoint documentation for response format.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
### Retrieve a single Transaction for a code by cardId and transactionId [GET /cards/{cardId}/transactions/{transactionId}]

Use this endpoint if your system or internal staff need to retrieve all the Transactions for a Code.  See the Code endpoint documentation for response format.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    + transactionId (string) - The identifier returned when the Transaction was created.
    
    
### Create a Transaction for a Code given the cardId [POST /cards/{cardId}/code/transactions]

Use this endpoint if your system or internal staff need to create a Transaction for a Code, such as to mark all or part of it as used.  See the Code endpoint documentation for request and response format.

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

    + Attributes
        + value (number, required) - The amount to use from the Code in the smallest currency unit (such as cents).  Must be a postive number.  If the amount exceeds the current value of the code, an error will result.
        + currency  (string, required) - The 3 character ISO-4217 currency code.  The supplied currency must match the currency of code when it was created or an error will result.
        + userSuppliedId (string, required) - A unique identifier for this transaction.
    

## Codes [/codes/{fullcode}]

A Code represents the financial device that is worth value to you and your store.  The fullcode is what is distributed to your recipients. Your externally facing experience (balance checks, transaction history, and checkout/use of value) should interact with the Code and Code Transaction endpoints described here.  Only these endpoints accept fullcodes.

You are never required to store the fullcode internally in your system, and we recommend for security that you do not.  You may interact internally (for customer support) with a Code through its corresponding cardId as described in the 'Card' reference.


### Retrieve basic Code information [GET]

Look up information about a code given the fullcode.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
+ Parameters 
    + fullcode (string) - The code given to the customer.
    
+ Response 200
    + Attributes
        + Code
            + codeLast4 (string) - The last 4 characters of the Code.
            + currency (string) - The 3 character ISO-4217 currency.
            + initialValue (number) - The value of the code at creation in the smallest currency unit (such as cents).
            + expires (string) - The code's expiry date and time.  This field will be ommitted if the code was not created with an expiry.  ISO-8601 format.
            + dateCreated (string) - The Giftbit system time of the creation in ISO-8601 format.

    + Body
    
            {
                "code":
                {
                    "codeLast4": "BF8Z",
                    "currency":"USD",
                    "initialValue":2500,
                    "expires":"2020-08-06T08:00:00.000+0000",
                    "dateCreated":"2016-08-10T08:00:00.000+0000"
                }
            }


### Retrieve Code balance [GET /codes/{fullcode}/balance]

Retrieve the balance of a Code considering all previous Transactions.  

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + fullcode (string) - the fullcode associated with the Code object and value given to the customer.
    
+ Response 200

    + Body
    
            {
                "balance":{
                    "currentValue": 200
                }
            }


### Use Code value [POST /codes/{fullcode}/transactions] 

Use some or all of the remaining value of the Code (create a Transaction on the Code).  Attempting to use value for a Code that is expired or does not have enough remaining value will result in an error.

+ Parameters 
    + fullcode (string) - The gift code.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

    + Attributes
        + value (number, required) - The amount to use from the Code in the smallest currency unit (such as cents).  Must be a postive number.  If the amount exceeds the current value of the code, an error will result.
        + currency  (string, required) The 3 character ISO-4217 currency code.  The supplied currency must match the currency of code when it was created or an error will result.
        + userSuppliedId (string, required) - A unique identifier for this transaction.

    + Body
    
            {
                "userSuppliedId": "12345678",
                "value": 165,
                "currency": "USD"
            }

+ Response 200

    + Attributes
        + value (number) - The amount of the transaction in the smallest currency unit (such as cents). Should equal value in the request.
        + transactionId (string) - The unique Id for this transaction assigned by Giftbit at creation time.
        + userSuppliedId (string) - Identifier of the transaction (should equal transactionId in the request).
        + valueAvailableAfterTransaction (number) - The current value of the code (after this transaction) in the smallest currency unit (such as cents).
        + dateCreated (string) - The Giftbit system time of the creation in ISO-8601 format.

    + Body
    
            {
                "transaction":{
                    "userSuppliedId": "12345678",
                    "transactionId":"d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                    "value": 165,
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "valueAvailableAfterTransaction": 4835
                    }
                }
            }
        
### Retrieve all Transactions for a Code [GET /codes/{fullcode}/transactions/{?limit}{?offset}]

Retrieve all Transactions for a Code given the fullcode.  Useful if you'd like to show a recipient their code usage history.  Results are returned in descending order of creation (newest first).

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
   
+ Parameter
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. Default 0.
+ Response 200

    + Body
    
            {
                "transactions":[
                    {
                        "userSuppliedId": "12345",
                        "transactionId":"d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                        "value": 500,
                        "dateCreated": "2016-08-11T08:32:00.000+0000",
                        "valueAvailableAfterTransaction": 800
                    },
                    {
                        "userSuppliedId": "12344",
                        "transactionId":"avji1b55-6gu7-4ke5-82s5-fd37edb5ju9a",
                        "value": 700,
                        "dateCreated": "2016-08-10T08:00:00.000+0000",
                        "valueAvailableAfterTransaction": 1300
                    }
                ],
                "pagination":{
                    "count": 2,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 2
                }
            }
    
### Retrieve a single Transaction for a Code [GET /codes/{fullcode}/transactions/{transactionIdOruserSuppliedId}]

Retrieve a Transactions for a Code given the fullcode and the transactionId or userSuppliedId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
+ Response 200

    + Body
    
            {
                "transaction":{
                    "userSuppliedId": "12345678",
                    "transactionId":"d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                    "value": 165,
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "valueAvailableAfterTransaction": 4835
                    }
                }
            }